{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","value","title","id","onClick","delTodo","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","amount","someVarName","App","useState","todos","setTodos","input","setInput","deleteTodo","e","preventDefault","console","log","docData","index","target","delItem","collection","doc","delete","setDocData","useEffect","onSnapshot","snapshot","docs","map","data","onChange","type","placeholder","disabled","uuidv4","set","localStorage","setItem","todo","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qQA+BeA,G,YA7BF,SAACC,GAGV,OAGI,yBACIC,UAAY,QAEZ,4BACPD,EAAME,MAAM,EADL,KACUF,EAAMG,OAEpB,4BACQF,UAAY,aACZG,GAAMJ,EAAMI,GACZF,MAASF,EAAME,MACfG,QAAWL,EAAMM,a,QCHlBC,E,OAbKC,EAASC,cAAc,CAEnCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAIQC,Y,OCPnBC,EAAO,EACPC,EAAcD,EAyGHE,MAvGf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAEFC,EAFE,KAEKC,EAFL,OAGiBF,mBAAS,IAH1B,mBAGFG,EAHE,KAGKC,EAHL,KASP,SAASC,EAAWC,GAEpBA,EAAEC,iBAEFC,QAAQC,IAAIC,GAEZ,IAAIC,EAAQL,EAAEM,OAAO/B,MAEjBgC,EAAUH,EAAQC,GAAO5B,GAE7Bc,IACAW,QAAQC,IAAI,uBAAyBI,GACrC3B,EAAG4B,WAAW,SAASC,IAAIF,GAASG,SArB7B,MAyBqBhB,mBAAS,IAzB9B,mBAyBFU,EAzBE,KAyBOO,EAzBP,KAoDb,OA1BIC,qBAAU,WACRhC,EAAG4B,WAAW,SAASK,YAAW,SAACC,GACjCH,EACEG,EAASC,KAAKC,KAAI,SAACP,GAAD,MAAU,CAAEhC,GAAIgC,EAAIhC,GAAIwC,KAAMR,EAAIQ,YAEtDrB,EAASkB,EAASC,KAAKC,KAAI,SAACP,GAAD,OAASA,EAAIQ,OAAOzC,eAGhD,IAoBT,yBAAKF,UAAU,OAEb,yBAAKA,UAAU,aAAY,0CACzB,8BACE,2BACEC,MAAOsB,EACPqB,SAAU,SAAAlB,GAAC,OAAIF,EAASE,EAAEM,OAAO/B,QAEjC4C,KAAK,OACLC,YAAc,qBAEhB,4BACE9C,UAAU,aACV+C,UAAWxB,EAEXsB,KAAK,SAELzC,QAnCmB,SAACsB,GACpBA,EAAEC,iBAEFrB,EAAG4B,WAAW,SACbC,IAAIa,gBAAUC,IAAI,CACjB/C,MAAOqB,IAET2B,aAAaC,QAAQlC,EAAQC,GAC7BD,GAAU,EAEVO,EAAS,OA6BjB,yBAAKxB,UAAU,kBAEPqB,EAAMqB,KAAI,SAACU,EAAKrB,GAAN,OAER,kBAAC,EAAD,CACG7B,MAASkD,EACTjD,GAAM6C,eACNK,IAAOtB,EACP9B,MAAS8B,EACT1B,QAAWoB,WClFJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.ef427209.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todo.css'\r\nconst Todo = (props) => {\r\n    \r\n    \r\n    return (\r\n\r\n\r\n        <div \r\n            className = \"todo\" >\r\n\r\n            <h2> \r\n    {props.value+1}. {props.title} \r\n            </h2> \r\n        <button \r\n                className = \"DelTodoBtn\"\r\n                id = {props.id}\r\n                value = {props.value}\r\n                onClick = {props.delTodo}\r\n            >   \r\n        </button>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default Todo;","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    \r\n        apiKey: \"AIzaSyDG6YkN_9Hfgm6TjbvlzBu2Wl_-c01npYc\",\r\n        authDomain: \"todo-app-e3d9d.firebaseapp.com\",\r\n        databaseURL: \"https://todo-app-e3d9d.firebaseio.com\",\r\n        projectId: \"todo-app-e3d9d\",\r\n        storageBucket: \"todo-app-e3d9d.appspot.com\",\r\n        messagingSenderId: \"958375853003\",\r\n        appId: \"1:958375853003:web:81d35b35cdbb35c2f5544e\"\r\n     \r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Todo from './Todo.js';\nimport db from \"./firebase\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\nlet amount=0;\nvar someVarName = amount;\n\nfunction App() {\n  \n      const [todos, setTodos] = useState([]);\n      const [input, setInput] = useState(\"\");\n      \n\n      \n\n\n        function deleteTodo(e) {\n\n        e.preventDefault();\n\n        console.log(docData);\n\n        let index = e.target.value;\n\n        let delItem = docData[index].id\n\n        amount--;\n        console.log(\"Deleted item DOC-ID:\" + delItem);   \n        db.collection(\"todos\").doc(delItem).delete();\n    \n\n      }\n      const [docData, setDocData] = useState([]);\n      useEffect(() => {\n        db.collection(\"todos\").onSnapshot((snapshot) => {\n          setDocData(\n            snapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() }))\n          );\n          setTodos(snapshot.docs.map((doc) => doc.data().title));\n        \n        });\n      }, []);\n\n      const handleSubmit = (e) => {\n        e.preventDefault();      \n    \n        db.collection(\"todos\")\n        .doc(uuidv4()).set({\n          title: input,\n        })  \n        localStorage.setItem(amount, someVarName);     \n        amount += 1;\n        \n        setInput(\"\");\n       \n      }\n     \n     \n      \n  return (\n  \n<div className=\"App\">\n      \n  <div className=\"todoTitle\"><h1>TO DO APP</h1></div>\n    <form>\n      <input\n        value={input} \n        onChange={e => setInput(e.target.value)}\n        \n        type=\"text\"\n        placeholder = \"Write a TO DO...\" \n      ></input> \n      <button\n        className=\"AddTodoBtn\"\n        disabled={!input} \n      \n        type=\"submit\"\n        \n        onClick={handleSubmit}>\n        \n      </button>  \n  \n<div className=\"todosContainer\">\n  {    \n        todos.map((todo,index) => (\n        \n          <Todo\n             title = {todo} \n             id = {uuidv4()}\n             key = {index}\n             value = {index}\n             delTodo = {deleteTodo}\n        \n          />\n         \n        ))\n        \n      }   \n      </div> \n    </form>\n    \n      \n</div>\n    \n        );\n        \n        \n  \n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}